@inject HttpClient httpClient

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href=""></a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable">
    <nav class="flex-column">
        <div class="nav-item px-3 d-flex align-items-center justify-content-between">
            <NavLink class="nav-link flex-grow-1" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3 d-flex align-items-center justify-content-between">
            <NavLink class="nav-link flex-grow-1" href="Ordre" Match="NavLinkMatch.All">
                <span class="bi bi-order-nav-menu" aria-hidden="true"></span> Ordre
            </NavLink>
            <button class="btn btn-sm btn-link p-0" @onclick="() => ToggleSubMenu(1)" title="Toggle submenu">
                <span class="bi @(showSubMenu[1] ? "bi-chevron-up" : "bi-chevron-down") text-white fw-bold" aria-hidden="true"></span>
            </button>
        </div>
        @if (showSubMenu[1])
        {
            <ul class="nav flex-column">
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="OpretOrdre" Match="NavLinkMatch.All">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Opret ordre
                    </NavLink>
                </li>
            </ul>
        }
        <div class="nav-item px-3 d-flex align-items-center justify-content-between">
            <NavLink class="nav-link flex-grow-1" href="Mekaniker" Match="NavLinkMatch.All">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Mekaniker
            </NavLink>
        </div>
        <div class="nav-item px-3 d-flex align-items-center justify-content-between">
            <NavLink class="nav-link flex-grow-1" href="Kundepage" Match="NavLinkMatch.All">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Kunde
            </NavLink>
        </div>
       <div class="nav-item px-3 d-flex align-items-center justify-content-between">
            <NavLink class="nav-link flex-grow-1" href="YdelsePage" Match="NavLinkMatch.All">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Ydelse
            </NavLink>
            </div>
         <div class="nav-item px-3 d-flex align-items-center justify-content-between">
            <NavLink class="nav-link flex-grow-1" href="Produkt" Match="NavLinkMatch.All">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Produkt
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="ScooterLejePage">
                <span aria-hidden="true"></span> &#128757; Scooter Leje
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" @onclick="HandleBackupClicked" disbled="@AwaitTenSeconds">
                <span aria-hidden="true" class="bi bi-list-nested-nav-menu"></span> Backup
            </NavLink>
        </div>
    </nav>
</div>


@code {
    private bool collapseNavMenu = true;
    private bool[] showSubMenu = new bool[6];

    private bool BackupClickedbool = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleSubMenu(int index)
    {
        for (int i = 0; i < showSubMenu.Length; i++)
        {
            showSubMenu[i] = i == index ? !showSubMenu[i] : false;
        }
    }

    private async Task HandleBackupClicked()
    {
        if (!BackupClickedbool)
        {
            OpenBackupPage();
            AwaitTenSeconds();
        }
    }

    private async Task AwaitTenSeconds()
    {
        BackupClickedbool = true;
        await Task.Delay(10000);
        BackupClickedbool = false;
    }

    private async Task OpenBackupPage()
    {
        var response = await httpClient.GetAsync("api/winform");    
    }

}
