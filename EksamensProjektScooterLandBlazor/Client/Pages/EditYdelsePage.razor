@using EksamensProjektScooterLandBlazor.Shared.Models;
@using EksamensProjektScooterLandBlazor.Client.Services;
@inject NavigationManager NavigationManager
@page "/EditYdelsePage/{ydelseID:int}"


<h4>Opdater ydelse: <u>@ydelse?.YdelseNavn</u></h4>


@if (ydelse == null)
{
    <p>indlæser ydelser</p>
}

else
{
    <EditForm EditContext="@EditContext"
              OnValidSubmit="@HandleValidSubmit"
              OnInvalidSubmit="@HandleInvalidSubmit"
              class="row p-3">
        <DataAnnotationsValidator />

        <div class="col-md-12 p-3 border-green bg-light rounded">
            <!-- Use row for input fields -->
            <div class="row mb-3">
                <div class="col-md-4 mb-3">
                    <label for="Name" class="form-label">Name</label>
                    <InputText id="Name" @bind-Value="ydelse.YdelseNavn" class="form-control form-control-sm" />
                    <ValidationMessage For="@(() => ydelse.YdelseNavn)" class="text-danger" />
                </div>

                <div class="col-md-4 mb-3">
                    <label for="Pris" class="form-label">Pris</label>
                    <InputNumber id="Pris" @bind-Value="ydelse.Pris" class="form-control form-control-sm"
                                 ParsingErrorMessage="The {0} field has an invalid value." />
                    <ValidationMessage For="@(() => ydelse.Pris)" class="text-danger" />
                </div>

                <div class="col-md-4 mb-3">
                    <label for="EstimeretTid" class="form-label">Estimeret Tid</label>
                    <InputNumber id="EstimeretTid" @bind-Value="ydelse.EstimeretTid" class="form-control form-control-sm"
                                 ParsingErrorMessage="The {0} field has an invalid value." />
                    <ValidationMessage For="@(() => ydelse.EstimeretTid)" class="text-danger" />
                </div>
            </div>

            <!-- Opdater button -->
            <div class="col-12 mb-3">
                <button type="submit" class="btn btn-primary col-12">Opdater</button>
            </div>

            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @ErrorMessage
                </div>
            }
        </div>
    </EditForm>
    
}

@code {

    [Inject]
    public IYdelseService YdelseService { get; set; }

    [Parameter]
    public int YdelseID { get; set; }

    private Ydelse? ydelse;

    private EditContext EditContext;
    public int ErrorCode { get; set; }
    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        ydelse = await YdelseService.GetYdelse(YdelseID);
        if (ydelse != null)
        {
            EditContext = new EditContext(ydelse);
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit called...");
        ErrorCode = await YdelseService.UpdateYdelse(ydelse);

        if (ErrorCode == 200)
        {
            NavigationManager.NavigateTo("/YdelsePage");
        }
        else
        {
            ErrorMessage = "Der opstod en fejl under opdatering af ydelse. Prøv igen.";
        }
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("HandleInvalidSubmit called...");
        ErrorMessage = "Formularen indeholder ugyldige data. Ret fejlene og prøv igen.";
    }
}
