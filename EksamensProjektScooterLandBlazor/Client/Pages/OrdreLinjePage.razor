@using EksamensProjektScooterLandBlazor.Client.Services;
@using EksamensProjektScooterLandBlazor.Shared.Models;
@using EksamensProjektScooterLandBlazor.Client.ChildComponents;
@page "/OrdreLinjePage/{OrdreID:int}"

@inject NavigationManager NavigationManager;

<h3>Ordrelinjer</h3>

<table class="table">
	<th>Ordrelinje ID</th>
	<th>Type</th>
	<th>Navn</th>
	<th>Dato</th>
	<th>Pris</th>
	<th>Antal</th>
	<th>Rabat</th>
	<th>Total</th>
	@if(currentOrdre.Afsluttet == false)
	{
		<th>Action</th>
	}
	
	@if(ordreLinjeListe.Count > 0)
	{
		@foreach (var item in ordreLinjeListe)
		{
			@if(item.ScooterLejeID == null)
			{
				<RenderOrdreLinje slettetProduktEllerYdelse="SlettetProduktEllerYdelse" ordreLinje="@item" currentOrdre="@currentOrdre" />
			}

		}
	}
	
</table>

<!-- Table til scooterleje -->
@if(ordreLinjeListe.Count > 0)
{
		if(Succes = ordreLinjeListe.Any(s => s.ScooterLejeID != null))
		{
			<table class="table">
					<th>OrdreLinje ID</th>
					<th>Type</th>
					<th>dagspris</th>
					<th>Antal dage</th>
					<th>km pris</th>
					<th>km kørt</th>
					<th>selvrisiko</th>
					<th>rabat procent</th>
					<th>sum</th>
					<th>action</th>
					@foreach (var item in ordreLinjeListe)
					{
						@if(item.ScooterLejeID != null)
						{
							<RenderScooterLejeOrdreLinje opdateretScooterleje="ToggleSelvrisiko" slettetScooterleje="SlettetScooterLeje" ordreLinje="@item" currentOrdre="@currentOrdre" />
							ListContainsScooterLejeBool = true;
						}
						
					}	
			</table>
		}
}


@if(ordreLinjeListe.Count == 0){
<h5><b>Ingen ordrelinjer i ordren</b></h5>
}

<h4><b>Sum: @BeregnSum().ToString("N2") kr.</b></h4>
<br />
<h4><b>Arbejdstimer: @BeregnMandetimer(ordreLinjeListe) timer.</b></h4>


@if(currentOrdre.Afsluttet == true)
{
	<button class="btn btn-primary" @onclick="() => NavigateToFakturaComponent(OrdreId)"> Faktura</button>
 }
else
{
	<button class="btn btn-primary" @onclick="AddProduktKnap">Tilføj produkt</button>
	<button class="btn btn-primary" @onclick="AddYdelseKnap">Tilføj ydelse</button>
	@if (ListContainsScooterLejeBool == false)
	{
		<button class="btn btn-primary" @onclick="AddScooterLejeKnap">Tilføj scooterleje</button>
	}
	<div></div> <br />
	<button class="btn btn-primary" @onclick="AfslutOrdreKnap">Afslut Ordre</button>
}


@if(ProduktKnap == true)
{
	<ProduktPage Produkttilføjet="Produkttilføjet" AddingOrdreBool="@ProduktKnap" OrdreID="@OrdreId" />
}

@if(YdelseKnap == true)
{
	<YdelsePage ydelseTilføjet="Ydelsetilføjet" AddingOrdreBool="@YdelseKnap" Ordreid="@OrdreId"/>
}

@if (ScooterLejeKnap == true)
{
	<ScooterLejePage scootertilføjet="Scootertilføjet" OrdreAddBool="@ScooterLejeKnap" Ordreid="@OrdreId" />
}



@if (showMessageBoxBool)
{
	<div class="message-box">
		<div class="message-content">
			<h4>Betaling</h4>
			<p>Er betaling modtaget på? <b>@BeregnSum().ToString("N2") kr.</b></p>
			<div class="message-actions">
				<button class="btn btn-success" @onclick="ConfirmAfslutOrdre">Ja</button>
				<button class="btn btn-danger" @onclick="CancelAfslutOrdre">Nej</button>
			</div>
		</div>
	</div>
}



@code {
	private bool Succes;
	private OrdreLinje ordreLinjeModel = new OrdreLinje();

	public List<OrdreLinje> ordreLinjeListe = new List<OrdreLinje>();

	private Ordre currentOrdre = new Ordre();

	private OrdreLinje ScooterOrdreLinje = new OrdreLinje();

	private ScooterLeje scooterLeje = new ScooterLeje();
	[Inject]
	public IScooterLejeService scooterLejeService { get; set; }

	[Inject]
	public IOrdreLinjeService OrdreLinjeService { get; set;}

	[Inject]
	public IOrdreService ordreService { get; set; }

	[Parameter]
	public int OrdreId { get; set; }

	[Parameter]
	public int KundeId { get; set; }


	private int ErrorCode { get; set; }

	private bool ProduktKnap = false;

	private bool YdelseKnap = false;

	private bool ScooterLejeKnap = false;

	private bool ListContainsScooterLejeBool = false;

	private bool selvrisikoBool { get; set; }

	private Kunde kunde;
	private Ordre ordre;


	protected override async Task OnInitializedAsync()
	{
		await GetOrdreLinjeList();
		currentOrdre = (await ordreService.GetOrdre(OrdreId));
		scooterLeje = await scooterLejeService.GetSingle(4);
	}

	public async void ToggleSelvrisiko()
	{
		selvrisikoBool = !selvrisikoBool;
		StateHasChanged();
	}

	public async void Produkttilføjet()
	{
		await GetOrdreLinjeList();
		StateHasChanged();
	}

	public async void Ydelsetilføjet()
	{
		await GetOrdreLinjeList();
		StateHasChanged();
	}

	public async void Scootertilføjet()
	{
		await GetOrdreLinjeList();
		ScooterLejeKnap = false;
		StateHasChanged();
	}

	public async void SlettetProduktEllerYdelse()
	{
		await GetOrdreLinjeList();
		StateHasChanged();
	}

	public async void SlettetScooterLeje()
	{
		await GetOrdreLinjeList();
		ListContainsScooterLejeBool = false;
		StateHasChanged();
	}

	public async Task GetOrdreLinjeList()
	{
		ordreLinjeListe = (await OrdreLinjeService.GetAllOrdreLinjer()).Where(l => l.OrdreID == OrdreId).ToList();
	}

	public double BeregnSum()
	{
		double sum = 0;

		foreach (var linje in ordreLinjeListe)
		{
			double pris = 0;

			if (linje.ScooterLejeID != null && linje.scooterLeje != null)
			{
				double dagsPrisXDage = linje.scooterLeje.DagsLejePris * linje.Antal;
				double KmPrisXAntal = linje.scooterLeje.ForsikringPrKm * (linje.AntalEkstra ?? 0);
				// hvis selvrisiko er true, så sæt selvrisiko til scooterlejemodel.selvrisiko, ellers sæt den til 0
				double selvrisiko = (linje.SelvrisikoBool ?? false) ? linje.scooterLeje.SelvRisiko : 0;
				pris = dagsPrisXDage + KmPrisXAntal + selvrisiko;
			}
			else if (linje.ProduktID != null)
			{
				pris = linje.produkt.ProduktPris * linje.Antal;
			}
			else if (linje.YdelseID != null)
			{
				pris = linje.ydelse.Pris * linje.Antal;
			}

			int rabat = linje.RabatProcent ?? 0;
			sum += pris * (1 - (rabat / 100.0));
		}
		return sum;
	}

	public double BeregnMandetimer(List<OrdreLinje> ordrelinjeListe)
	{
		double sum = 0;
		foreach(var item in ordrelinjeListe)
		{
			if(item.YdelseID != null)
			{
				double value = item.ydelse.EstimeretTid * item.Antal;
				sum += value;
			}
		}
		return sum;
	}

	private async void AddProduktKnap()
	{
		ProduktKnap = !ProduktKnap;
		if(YdelseKnap == true)
		{
			YdelseKnap = false;
			ScooterLejeKnap = false;
		}

		StateHasChanged();
	}

	private async void AddYdelseKnap()
	{
		YdelseKnap = !YdelseKnap;
		if(ProduktKnap == true)
		{
			ProduktKnap = false;
			ScooterLejeKnap = false;
		}
		StateHasChanged();
	}

	private async void AddScooterLejeKnap()
	{
		ScooterLejeKnap = !ScooterLejeKnap;
		if(ScooterLejeKnap == true)
		{
			YdelseKnap = false;
			ProduktKnap = false;
		}
		StateHasChanged();
	}


	// message box kode til afslut ordre med betaling
	private bool showMessageBoxBool = false;

	private async void AfslutOrdreKnap()
	{
		showMessageBoxBool = true;
		StateHasChanged();
	}

	private async void ConfirmAfslutOrdre()
	{
		// hvis der bliver trykket på at betaling er modtaget, køre denne metode
		showMessageBoxBool = false;
		currentOrdre.Afsluttet = true;
		currentOrdre.BetalingsSum = BeregnSum();
		ProduktKnap = false;
		YdelseKnap = false;
		ScooterLejeKnap = false;

		ErrorCode = await ordreService.UpdateOrdre(currentOrdre);

		if (ErrorCode == 0)
		{
			Console.WriteLine("Order afsluttet successfult.");
		}
		else
		{
			Console.WriteLine("Error afslutting order: " + ErrorCode);
		}

		StateHasChanged();
	}

	private void CancelAfslutOrdre()
	{
		// hvis der bliver trykket på nej til modtaget betaling
		showMessageBoxBool = false;
		Console.WriteLine("Afslutning cancelled.");
	}

	private void NavigateToFakturaComponent(int OrdreID)
	{
		NavigationManager.NavigateTo($"/FakturaPage/{OrdreID}");

	}
}
