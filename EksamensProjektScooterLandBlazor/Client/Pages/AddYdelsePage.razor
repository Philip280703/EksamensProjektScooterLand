@inject HttpClient httpClient;
@using EksamensProjektScooterLandBlazor.Shared.Models;
@using EksamensProjektScooterLandBlazor.Client.Services;

@page "/AddYdelsePage"


<br />

<EditForm EditContext="@EditContext"
          OnValidSubmit="@HandleValidSubmit"
          OnInvalidSubmit="@HandleInvalidSubmit"
          class="row p-3">
    <DataAnnotationsValidator />
 
    <div class="col-md-12 p-3 border-green bg-light rounded">
        <!-- Use row for input fields -->
        <div class="row mb-3">
            <div class="col-md-4 mb-3">
                <label for="Name" class="form-label">Name</label>
                <InputText id="Name" @bind-Value="YdelseModel.YdelseNavn" class="form-control form-control-sm" />
                <ValidationMessage For="@(() => YdelseModel.YdelseNavn)" class="text-danger" />
            </div>

            <div class="col-md-4 mb-3">
                <label for="Pris" class="form-label">Pris</label>
                <InputNumber id="Pris" @bind-Value="YdelseModel.Pris" class="form-control form-control-sm"
                             ParsingErrorMessage="The {0} field has an invalid value." />
                <ValidationMessage For="@(() => YdelseModel.Pris)" class="text-danger" />
            </div>

            <div class="col-md-4 mb-3">
                <label for="EstimeretTid" class="form-label">Estimeret Tid</label>
                <InputNumber id="EstimeretTid" @bind-Value="YdelseModel.EstimeretTid" class="form-control form-control-sm"
                             ParsingErrorMessage="The {0} field has an invalid value." />
                <ValidationMessage For="@(() => YdelseModel.EstimeretTid)" class="text-danger" />
            </div>
        </div>

        <!-- Submit button -->
        <div class="col-12 mb-3">
            <button type="submit" class="btn btn-primary col-12">Tilføj</button>
        </div>
    </div>
</EditForm>


@if (ErrorCode != 0)
{
    <p>@(ErrorCode == 200 ? "Ydelse successfully added!" : $"Error adding Ydelse. Code: {ErrorCode}")</p>
}

@code{
    [Parameter]
    public bool AddYdelsebtn { get; set; }


        [Inject]
        public IYdelseService Service { get; set; }

        private List<Ydelse> YdelsesList = new List<Ydelse>();

        private EditContext EditContext;

        private Ydelse YdelseModel = new Ydelse();

        private int ErrorCode { get; set; } = 0;

        protected override async Task OnInitializedAsync()
        {
            EditContext = new EditContext(YdelseModel);
            YdelsesList = (await Service.GetAllYdelser()).ToList();
        }

        private async void HandleValidSubmit()
        {
            ErrorCode = await Service.AddYdelse(YdelseModel);
            Console.WriteLine("Ydelse tilføjet: return code: " + ErrorCode);
            // Ryder formen efter tilføjelse
            YdelseModel = new Ydelse();
            StateHasChanged();
        }
        private void HandleInvalidSubmit()
        {
            Console.WriteLine("HandleInvalidSubmit Called...");

        }

        // Nyt ydelse oprettes
       


        public async Task DeleteYdelseHandler()
        {

        }

        public async Task UpdateYdelseHandler()
        {
            ErrorCode = await Service.UpdateYdelse(YdelseModel);
            Console.WriteLine("Ydelse opdateret: return code: " + ErrorCode);

            YdelseModel = new Ydelse();
           
        }

}