@using EksamensProjektScooterLandBlazor.Shared.Models;
@using EksamensProjektScooterLandBlazor.Client.Services;
@using EksamensProjektScooterLandBlazor.Client.ChildComponents;

@page "/Produkt"


<h3>Produkter</h3>
<br/>

<br/>

<div class="table-container">
	<table class="table">
		<thead>
			<tr>
				<th> Id</th>
				<th> Produktnavn</th>
				<th>Produktpris</th>
				<th>Action</th>
			</tr>
		</thead>

		<thead>

			@foreach (var item in produktListe)
			{
				<RenderProdukt produkt="@item" deleteProdukt="DeleteProdukt" />
			}

		</thead>
	</table>

</div>


<br/>

@* <EditForm EditContext="@EditContext"
OnValidSubmit="HandleValidSubmit"
OnInvalidSubmit="HandleInvalidSubmit">



	<!-- ValidatorsCall-->

	<ValidationSummary/>
	<DataAnnotationsValidator/>


	<div>
		<label for="name">Produkt:</label>
		<InputText id="navn" @bind-Value="newProdukt.ProduktNavn"/>
		<ValidationMessage For="@(() => newProdukt.ProduktNavn)" />
	</div>
	<div>
		<label for="pris">Pris:</label>
		<InputNumber id="Pris" @bind-Value="newProdukt.ProduktPris"
		class="form-control"
		style="width: 100px;"
		min="0"
		@oninput="EnsureNonNegative"/> 

	</div>
	<br />
	<div class="col-12 mb-3">
		<button type="submit" class="btn btn-outline-primary">Submit</button>
	</div>
</EditForm> *@














@code
{
	private List<Produkt> produktListe = new List<Produkt>();

	// Nyt item som oprettes gennem formen
	private Produkt newProdukt = new Produkt();

	private int ErrorCode { get; set; } = 0;

	private EditContext EditContext;

	[Inject]
	public IProduktService Service {get; set;}


	protected override void OnInitialized()
	{
		EditContext = new EditContext(newProdukt);
	}

	public async void DeleteProdukt(Produkt produkt)
	{
		produktListe.Remove(produkt);
		ErrorCode = await Service.DeleteProdukt(produkt.ProduktID);
	}



	protected override async Task OnInitializedAsync()
	{
		produktListe = (await Service.GetAllProdukt()).ToList();

	}

	private void EnsureNonNegative(ChangeEventArgs e)
	{
		if (double.TryParse(e.Value?.ToString(), out var value))
		{
			if (value < 0)
			{
				newProdukt.ProduktPris = 0;
			}
			else 
			{
				newProdukt.ProduktPris = value;
			}
		}
	}

	public async Task HandleValidSubmit()
	{

		ErrorCode = await Service.AddProdukt(newProdukt);
		Console.WriteLine("Shopping item added: return code: " + ErrorCode);

		// Ryd formen efter tilføjelse
		newProdukt = new Produkt();
		EditContext = new EditContext(newProdukt);
		StateHasChanged();
	}

	
	public async Task HandleInvalidSubmit()
	{
		Console.WriteLine("HandleInvalidSubmit Called...");
	}
}
