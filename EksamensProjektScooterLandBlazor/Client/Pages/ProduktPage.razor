@using EksamensProjektScooterLandBlazor.Shared.Models;
@using EksamensProjektScooterLandBlazor.Client.Services;
@using EksamensProjektScooterLandBlazor.Client.ChildComponents;

@page "/Produkt"

<br />
<h4>Produkter</h4>

<div class="table-container">
	<table class="table">
		<thead>
			<tr>
				<th> Id</th>
				<th> Produktnavn</th>
				<th>Produktpris</th>
				<th>Action</th>
			</tr>
		</thead>

		<thead>

			@foreach (var item in produktListe)
			{
				<RenderProdukt produkt="@item" Produkttilføjet="tilføjetProdukt" deleteProdukt="DeleteProdukt" OrdreAddBool="@AddingOrdreBool" OrdreId="@OrdreID" />
			}

		</thead>
	</table>

</div>




@code
{
	private List<Produkt> produktListe = new List<Produkt>();

	// Nyt item som oprettes gennem formen
	private Produkt newProdukt = new Produkt();

	private int ErrorCode { get; set; } = 0;

	private EditContext EditContext;

	[Inject]
	public IProduktService Service {get; set;}

	[Parameter]
	public bool AddingOrdreBool { get; set; }

	[Parameter]
	public int OrdreID { get; set; }

	[Parameter]
	public EventCallback Produkttilføjet { get; set; }

	protected override void OnInitialized()
	{
		EditContext = new EditContext(newProdukt);
	}

	public async Task tilføjetProdukt()
	{
		await Produkttilføjet.InvokeAsync();
	}

	public async void DeleteProdukt(Produkt produkt)
	{
		// produktListe.Remove(produkt);
		// ErrorCode = await Service.DeleteProdukt(produkt.ProduktID);
	}



	protected override async Task OnInitializedAsync()
	{
		produktListe = (await Service.GetAllProdukt()).ToList();

	}

	private void EnsureNonNegative(ChangeEventArgs e)
	{
		if (double.TryParse(e.Value?.ToString(), out var value))
		{
			if (value < 0)
			{
				newProdukt.ProduktPris = 0;
			}
			else 
			{
				newProdukt.ProduktPris = value;
			}
		}
	}

	public async Task HandleValidSubmit()
	{

		ErrorCode = await Service.AddProdukt(newProdukt);
		Console.WriteLine("Shopping item added: return code: " + ErrorCode);

		// Ryd formen efter tilføjelse
		newProdukt = new Produkt();
		EditContext = new EditContext(newProdukt);
		StateHasChanged();
	}


	public async Task HandleInvalidSubmit()
	{
		Console.WriteLine("HandleInvalidSubmit Called...");
	}

	
}
