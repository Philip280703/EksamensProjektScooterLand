@using EksamensProjektScooterLandBlazor.Client.ChildComponents;
@using EksamensProjektScooterLandBlazor.Shared.Models;
@using EksamensProjektScooterLandBlazor.Client.Services;

@page "/YdelsePage"

<h3>Ydelse</h3>

<table class="table">
    <tr>
        <th>YdelseID</th>
        <th>Ydelsesnavn</th>
        <th>EstimeretTid</th>
        <th>Pris</th>
    </tr>

  @*   @foreach (var item in YdelsesList)
    {
        <RenderYdelse ydelse ="@item" />
    } *@
</table>

    <div>
    @foreach (var ydelse in YdelsesList)
    {
        <li>@ydelse.YdelseID (@ydelse.YdelseNavn) - (@ydelse.EstimeretTid) - (@ydelse.Pris) </li>
    }
    </div>

    <br />


<EditForm Model="newYdelse" OnValidSubmit="AddYdelseHandler">
    <div>
        <label for="name">Ydelse:</label>
        <InputText id="navn" @bind-Value="newYdelse.YdelseNavn" />
    </div>
    <div>
        <label for="EstimeretTid">EstimeretTid:</label>
        <InputNumber id="EstimeretTid" @bind-Value="newYdelse.EstimeretTid" />
    </div>
    <div>
        <label for="Pris">Pris:</label>
        <InputNumber id="Pris" @bind-Value="newYdelse.Pris" />
    </div>
    <br />
    <button type="submit">Tilføj Ydelse </button>
</EditForm>


@if (ErrorCode != 0)
{
    <p>@(ErrorCode == 200 ? "Ydelse successfully added!" : $"Error adding Ydelse. Code: {ErrorCode}")</p>
}



@code {

    [Inject]
    public IYdelseService Service { get; set; }

    private List<Ydelse> YdelsesList = new List<Ydelse>();

    private int ErrorCode { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        YdelsesList = (await Service.GetAllYdelser()).ToList();
    }

    // Nyt item som oprettes gennem formen
    private Ydelse newYdelse = new Ydelse();

    public async Task AddYdelseHandler()
    {
        ErrorCode = await Service.AddYdelse(newYdelse);
        Console.WriteLine("Shopping item added: return code: " + ErrorCode);

        // Ryd formen efter tilføjelse
        newYdelse = new Ydelse();
    }
}
